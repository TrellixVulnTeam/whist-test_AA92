{"ast":null,"code":"'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Keys = require('./keys');\n\nconst internals = {};\nmodule.exports = Keys.extend({\n  type: 'function',\n  properties: {\n    typeof: 'function'\n  },\n  rules: {\n    arity: {\n      method(n) {\n        Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n        return this.$_addRule({\n          name: 'arity',\n          args: {\n            n\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        n\n      }) {\n        if (value.length === n) {\n          return value;\n        }\n\n        return helpers.error('function.arity', {\n          n\n        });\n      }\n\n    },\n    class: {\n      method() {\n        return this.$_addRule('class');\n      },\n\n      validate(value, helpers) {\n        if (/^\\s*class\\s/.test(value.toString())) {\n          return value;\n        }\n\n        return helpers.error('function.class', {\n          value\n        });\n      }\n\n    },\n    minArity: {\n      method(n) {\n        Assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');\n        return this.$_addRule({\n          name: 'minArity',\n          args: {\n            n\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        n\n      }) {\n        if (value.length >= n) {\n          return value;\n        }\n\n        return helpers.error('function.minArity', {\n          n\n        });\n      }\n\n    },\n    maxArity: {\n      method(n) {\n        Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n        return this.$_addRule({\n          name: 'maxArity',\n          args: {\n            n\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        n\n      }) {\n        if (value.length <= n) {\n          return value;\n        }\n\n        return helpers.error('function.maxArity', {\n          n\n        });\n      }\n\n    }\n  },\n  messages: {\n    'function.arity': '{{#label}} must have an arity of {{#n}}',\n    'function.class': '{{#label}} must be a class',\n    'function.maxArity': '{{#label}} must have an arity lesser or equal to {{#n}}',\n    'function.minArity': '{{#label}} must have an arity greater or equal to {{#n}}'\n  }\n});","map":{"version":3,"sources":["C:/scripting/jobs assignments/whist/backend/node_modules/joi/lib/types/function.js"],"names":["Assert","require","Keys","internals","module","exports","extend","type","properties","typeof","rules","arity","method","n","Number","isSafeInteger","$_addRule","name","args","validate","value","helpers","length","error","class","test","toString","minArity","maxArity","messages"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Keys = require('./keys');\n\n\nconst internals = {};\n\n\nmodule.exports = Keys.extend({\n\n    type: 'function',\n\n    properties: {\n        typeof: 'function'\n    },\n\n    rules: {\n        arity: {\n            method(n) {\n\n                Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n\n                return this.$_addRule({ name: 'arity', args: { n } });\n            },\n            validate(value, helpers, { n }) {\n\n                if (value.length === n) {\n                    return value;\n                }\n\n                return helpers.error('function.arity', { n });\n            }\n        },\n\n        class: {\n            method() {\n\n                return this.$_addRule('class');\n            },\n            validate(value, helpers) {\n\n                if ((/^\\s*class\\s/).test(value.toString())) {\n                    return value;\n                }\n\n                return helpers.error('function.class', { value });\n            }\n        },\n\n        minArity: {\n            method(n) {\n\n                Assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');\n\n                return this.$_addRule({ name: 'minArity', args: { n } });\n            },\n            validate(value, helpers, { n }) {\n\n                if (value.length >= n) {\n                    return value;\n                }\n\n                return helpers.error('function.minArity', { n });\n            }\n        },\n\n        maxArity: {\n            method(n) {\n\n                Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n\n                return this.$_addRule({ name: 'maxArity', args: { n } });\n            },\n            validate(value, helpers, { n }) {\n\n                if (value.length <= n) {\n                    return value;\n                }\n\n                return helpers.error('function.maxArity', { n });\n            }\n        }\n    },\n\n    messages: {\n        'function.arity': '{{#label}} must have an arity of {{#n}}',\n        'function.class': '{{#label}} must be a class',\n        'function.maxArity': '{{#label}} must have an arity lesser or equal to {{#n}}',\n        'function.minArity': '{{#label}} must have an arity greater or equal to {{#n}}'\n    }\n});\n"]},"metadata":{},"sourceType":"script"}