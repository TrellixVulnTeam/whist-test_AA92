{"ast":null,"code":"'use strict';\n\nconst Url = require('url');\n\nconst Errors = require('./errors');\n\nconst internals = {\n  minDomainSegments: 2,\n  nonAsciiRx: /[^\\x00-\\x7f]/,\n  domainControlRx: /[\\x00-\\x20@\\:\\/\\\\#!\\$&\\'\\(\\)\\*\\+,;=\\?]/,\n  // Control + space + separators\n  tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,\n  domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,\n  URL: Url.URL || URL // $lab:coverage:ignore$\n\n};\n\nexports.analyze = function (domain, options = {}) {\n  if (typeof domain !== 'string') {\n    throw new Error('Invalid input: domain must be a string');\n  }\n\n  if (!domain) {\n    return Errors.code('DOMAIN_NON_EMPTY_STRING');\n  }\n\n  if (domain.length > 256) {\n    return Errors.code('DOMAIN_TOO_LONG');\n  }\n\n  const ascii = !internals.nonAsciiRx.test(domain);\n\n  if (!ascii) {\n    if (options.allowUnicode === false) {\n      // Defaults to true\n      return Errors.code('DOMAIN_INVALID_UNICODE_CHARS');\n    }\n\n    domain = domain.normalize('NFC');\n  }\n\n  if (internals.domainControlRx.test(domain)) {\n    return Errors.code('DOMAIN_INVALID_CHARS');\n  }\n\n  domain = internals.punycode(domain); // https://tools.ietf.org/html/rfc1035 section 2.3.1\n\n  const minDomainSegments = options.minDomainSegments || internals.minDomainSegments;\n  const segments = domain.split('.');\n\n  if (segments.length < minDomainSegments) {\n    return Errors.code('DOMAIN_SEGMENTS_COUNT');\n  }\n\n  if (options.maxDomainSegments) {\n    if (segments.length > options.maxDomainSegments) {\n      return Errors.code('DOMAIN_SEGMENTS_COUNT_MAX');\n    }\n  }\n\n  const tlds = options.tlds;\n\n  if (tlds) {\n    const tld = segments[segments.length - 1].toLowerCase();\n\n    if (tlds.deny && tlds.deny.has(tld) || tlds.allow && !tlds.allow.has(tld)) {\n      return Errors.code('DOMAIN_FORBIDDEN_TLDS');\n    }\n  }\n\n  for (let i = 0; i < segments.length; ++i) {\n    const segment = segments[i];\n\n    if (!segment.length) {\n      return Errors.code('DOMAIN_EMPTY_SEGMENT');\n    }\n\n    if (segment.length > 63) {\n      return Errors.code('DOMAIN_LONG_SEGMENT');\n    }\n\n    if (i < segments.length - 1) {\n      if (!internals.domainSegmentRx.test(segment)) {\n        return Errors.code('DOMAIN_INVALID_CHARS');\n      }\n    } else {\n      if (!internals.tldSegmentRx.test(segment)) {\n        return Errors.code('DOMAIN_INVALID_TLDS_CHARS');\n      }\n    }\n  }\n\n  return null;\n};\n\nexports.isValid = function (domain, options) {\n  return !exports.analyze(domain, options);\n};\n\ninternals.punycode = function (domain) {\n  try {\n    return new internals.URL(`http://${domain}`).host;\n  } catch (err) {\n    return domain;\n  }\n};","map":{"version":3,"sources":["C:/scripting/jobs assignments/whist/backend/node_modules/@sideway/address/lib/domain.js"],"names":["Url","require","Errors","internals","minDomainSegments","nonAsciiRx","domainControlRx","tldSegmentRx","domainSegmentRx","URL","exports","analyze","domain","options","Error","code","length","ascii","test","allowUnicode","normalize","punycode","segments","split","maxDomainSegments","tlds","tld","toLowerCase","deny","has","allow","i","segment","isValid","host","err"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAEA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AAGA,MAAME,SAAS,GAAG;AACdC,EAAAA,iBAAiB,EAAE,CADL;AAEdC,EAAAA,UAAU,EAAE,cAFE;AAGdC,EAAAA,eAAe,EAAE,wCAHH;AAGsE;AACpFC,EAAAA,YAAY,EAAE,0CAJA;AAKdC,EAAAA,eAAe,EAAE,6CALH;AAMdC,EAAAA,GAAG,EAAET,GAAG,CAACS,GAAJ,IAAWA,GANF,CAMsE;;AANtE,CAAlB;;AAUAC,OAAO,CAACC,OAAR,GAAkB,UAAUC,MAAV,EAAkBC,OAAO,GAAG,EAA5B,EAAgC;AAE9C,MAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,UAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACH;;AAED,MAAI,CAACF,MAAL,EAAa;AACT,WAAOV,MAAM,CAACa,IAAP,CAAY,yBAAZ,CAAP;AACH;;AAED,MAAIH,MAAM,CAACI,MAAP,GAAgB,GAApB,EAAyB;AACrB,WAAOd,MAAM,CAACa,IAAP,CAAY,iBAAZ,CAAP;AACH;;AAED,QAAME,KAAK,GAAG,CAACd,SAAS,CAACE,UAAV,CAAqBa,IAArB,CAA0BN,MAA1B,CAAf;;AACA,MAAI,CAACK,KAAL,EAAY;AACR,QAAIJ,OAAO,CAACM,YAAR,KAAyB,KAA7B,EAAoC;AAA4C;AAC5E,aAAOjB,MAAM,CAACa,IAAP,CAAY,8BAAZ,CAAP;AACH;;AAEDH,IAAAA,MAAM,GAAGA,MAAM,CAACQ,SAAP,CAAiB,KAAjB,CAAT;AACH;;AAED,MAAIjB,SAAS,CAACG,eAAV,CAA0BY,IAA1B,CAA+BN,MAA/B,CAAJ,EAA4C;AACxC,WAAOV,MAAM,CAACa,IAAP,CAAY,sBAAZ,CAAP;AACH;;AAEDH,EAAAA,MAAM,GAAGT,SAAS,CAACkB,QAAV,CAAmBT,MAAnB,CAAT,CA3B8C,CA6B9C;;AAEA,QAAMR,iBAAiB,GAAGS,OAAO,CAACT,iBAAR,IAA6BD,SAAS,CAACC,iBAAjE;AAEA,QAAMkB,QAAQ,GAAGV,MAAM,CAACW,KAAP,CAAa,GAAb,CAAjB;;AACA,MAAID,QAAQ,CAACN,MAAT,GAAkBZ,iBAAtB,EAAyC;AACrC,WAAOF,MAAM,CAACa,IAAP,CAAY,uBAAZ,CAAP;AACH;;AAED,MAAIF,OAAO,CAACW,iBAAZ,EAA+B;AAC3B,QAAIF,QAAQ,CAACN,MAAT,GAAkBH,OAAO,CAACW,iBAA9B,EAAiD;AAC7C,aAAOtB,MAAM,CAACa,IAAP,CAAY,2BAAZ,CAAP;AACH;AACJ;;AAED,QAAMU,IAAI,GAAGZ,OAAO,CAACY,IAArB;;AACA,MAAIA,IAAJ,EAAU;AACN,UAAMC,GAAG,GAAGJ,QAAQ,CAACA,QAAQ,CAACN,MAAT,GAAkB,CAAnB,CAAR,CAA8BW,WAA9B,EAAZ;;AACA,QAAIF,IAAI,CAACG,IAAL,IAAaH,IAAI,CAACG,IAAL,CAAUC,GAAV,CAAcH,GAAd,CAAb,IACAD,IAAI,CAACK,KAAL,IAAc,CAACL,IAAI,CAACK,KAAL,CAAWD,GAAX,CAAeH,GAAf,CADnB,EACwC;AAEpC,aAAOxB,MAAM,CAACa,IAAP,CAAY,uBAAZ,CAAP;AACH;AACJ;;AAED,OAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,QAAQ,CAACN,MAA7B,EAAqC,EAAEe,CAAvC,EAA0C;AACtC,UAAMC,OAAO,GAAGV,QAAQ,CAACS,CAAD,CAAxB;;AAEA,QAAI,CAACC,OAAO,CAAChB,MAAb,EAAqB;AACjB,aAAOd,MAAM,CAACa,IAAP,CAAY,sBAAZ,CAAP;AACH;;AAED,QAAIiB,OAAO,CAAChB,MAAR,GAAiB,EAArB,EAAyB;AACrB,aAAOd,MAAM,CAACa,IAAP,CAAY,qBAAZ,CAAP;AACH;;AAED,QAAIgB,CAAC,GAAGT,QAAQ,CAACN,MAAT,GAAkB,CAA1B,EAA6B;AACzB,UAAI,CAACb,SAAS,CAACK,eAAV,CAA0BU,IAA1B,CAA+Bc,OAA/B,CAAL,EAA8C;AAC1C,eAAO9B,MAAM,CAACa,IAAP,CAAY,sBAAZ,CAAP;AACH;AACJ,KAJD,MAKK;AACD,UAAI,CAACZ,SAAS,CAACI,YAAV,CAAuBW,IAAvB,CAA4Bc,OAA5B,CAAL,EAA2C;AACvC,eAAO9B,MAAM,CAACa,IAAP,CAAY,2BAAZ,CAAP;AACH;AACJ;AACJ;;AAED,SAAO,IAAP;AACH,CA9ED;;AAiFAL,OAAO,CAACuB,OAAR,GAAkB,UAAUrB,MAAV,EAAkBC,OAAlB,EAA2B;AAEzC,SAAO,CAACH,OAAO,CAACC,OAAR,CAAgBC,MAAhB,EAAwBC,OAAxB,CAAR;AACH,CAHD;;AAMAV,SAAS,CAACkB,QAAV,GAAqB,UAAUT,MAAV,EAAkB;AAEnC,MAAI;AACA,WAAO,IAAIT,SAAS,CAACM,GAAd,CAAmB,UAASG,MAAO,EAAnC,EAAsCsB,IAA7C;AACH,GAFD,CAGA,OAAOC,GAAP,EAAY;AACR,WAAOvB,MAAP;AACH;AACJ,CARD","sourcesContent":["'use strict';\n\nconst Url = require('url');\n\nconst Errors = require('./errors');\n\n\nconst internals = {\n    minDomainSegments: 2,\n    nonAsciiRx: /[^\\x00-\\x7f]/,\n    domainControlRx: /[\\x00-\\x20@\\:\\/\\\\#!\\$&\\'\\(\\)\\*\\+,;=\\?]/,                          // Control + space + separators\n    tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,\n    domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,\n    URL: Url.URL || URL                                                                 // $lab:coverage:ignore$\n};\n\n\nexports.analyze = function (domain, options = {}) {\n\n    if (typeof domain !== 'string') {\n        throw new Error('Invalid input: domain must be a string');\n    }\n\n    if (!domain) {\n        return Errors.code('DOMAIN_NON_EMPTY_STRING');\n    }\n\n    if (domain.length > 256) {\n        return Errors.code('DOMAIN_TOO_LONG');\n    }\n\n    const ascii = !internals.nonAsciiRx.test(domain);\n    if (!ascii) {\n        if (options.allowUnicode === false) {                                           // Defaults to true\n            return Errors.code('DOMAIN_INVALID_UNICODE_CHARS');\n        }\n\n        domain = domain.normalize('NFC');\n    }\n\n    if (internals.domainControlRx.test(domain)) {\n        return Errors.code('DOMAIN_INVALID_CHARS');\n    }\n\n    domain = internals.punycode(domain);\n\n    // https://tools.ietf.org/html/rfc1035 section 2.3.1\n\n    const minDomainSegments = options.minDomainSegments || internals.minDomainSegments;\n\n    const segments = domain.split('.');\n    if (segments.length < minDomainSegments) {\n        return Errors.code('DOMAIN_SEGMENTS_COUNT');\n    }\n\n    if (options.maxDomainSegments) {\n        if (segments.length > options.maxDomainSegments) {\n            return Errors.code('DOMAIN_SEGMENTS_COUNT_MAX');\n        }\n    }\n\n    const tlds = options.tlds;\n    if (tlds) {\n        const tld = segments[segments.length - 1].toLowerCase();\n        if (tlds.deny && tlds.deny.has(tld) ||\n            tlds.allow && !tlds.allow.has(tld)) {\n\n            return Errors.code('DOMAIN_FORBIDDEN_TLDS');\n        }\n    }\n\n    for (let i = 0; i < segments.length; ++i) {\n        const segment = segments[i];\n\n        if (!segment.length) {\n            return Errors.code('DOMAIN_EMPTY_SEGMENT');\n        }\n\n        if (segment.length > 63) {\n            return Errors.code('DOMAIN_LONG_SEGMENT');\n        }\n\n        if (i < segments.length - 1) {\n            if (!internals.domainSegmentRx.test(segment)) {\n                return Errors.code('DOMAIN_INVALID_CHARS');\n            }\n        }\n        else {\n            if (!internals.tldSegmentRx.test(segment)) {\n                return Errors.code('DOMAIN_INVALID_TLDS_CHARS');\n            }\n        }\n    }\n\n    return null;\n};\n\n\nexports.isValid = function (domain, options) {\n\n    return !exports.analyze(domain, options);\n};\n\n\ninternals.punycode = function (domain) {\n\n    try {\n        return new internals.URL(`http://${domain}`).host;\n    }\n    catch (err) {\n        return domain;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}