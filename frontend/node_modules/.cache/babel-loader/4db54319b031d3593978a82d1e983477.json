{"ast":null,"code":"'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Base = require('../base');\n\nconst Common = require('../common');\n\nconst Messages = require('../messages');\n\nconst internals = {};\nmodule.exports = Base.extend({\n  type: 'any',\n  flags: {\n    only: {\n      default: false\n    }\n  },\n  terms: {\n    alterations: {\n      init: null\n    },\n    examples: {\n      init: null\n    },\n    externals: {\n      init: null\n    },\n    metas: {\n      init: []\n    },\n    notes: {\n      init: []\n    },\n    shared: {\n      init: null\n    },\n    tags: {\n      init: []\n    },\n    whens: {\n      init: null\n    }\n  },\n  rules: {\n    custom: {\n      method(method, description) {\n        Assert(typeof method === 'function', 'Method must be a function');\n        Assert(description === undefined || description && typeof description === 'string', 'Description must be a non-empty string');\n        return this.$_addRule({\n          name: 'custom',\n          args: {\n            method,\n            description\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        method\n      }) {\n        try {\n          return method(value, helpers);\n        } catch (err) {\n          return helpers.error('any.custom', {\n            error: err\n          });\n        }\n      },\n\n      args: ['method', 'description'],\n      multi: true\n    },\n    messages: {\n      method(messages) {\n        return this.prefs({\n          messages\n        });\n      }\n\n    },\n    shared: {\n      method(schema) {\n        Assert(Common.isSchema(schema) && schema._flags.id, 'Schema must be a schema with an id');\n        const obj = this.clone();\n        obj.$_terms.shared = obj.$_terms.shared || [];\n        obj.$_terms.shared.push(schema);\n        obj.$_mutateRegister(schema);\n        return obj;\n      }\n\n    },\n    warning: {\n      method(code, local) {\n        Assert(code && typeof code === 'string', 'Invalid warning code');\n        return this.$_addRule({\n          name: 'warning',\n          args: {\n            code,\n            local\n          },\n          warn: true\n        });\n      },\n\n      validate(value, helpers, {\n        code,\n        local\n      }) {\n        return helpers.error(code, local);\n      },\n\n      args: ['code', 'local'],\n      multi: true\n    }\n  },\n  modifiers: {\n    keep(rule, enabled = true) {\n      rule.keep = enabled;\n    },\n\n    message(rule, message) {\n      rule.message = Messages.compile(message);\n    },\n\n    warn(rule, enabled = true) {\n      rule.warn = enabled;\n    }\n\n  },\n  manifest: {\n    build(obj, desc) {\n      for (const key in desc) {\n        const values = desc[key];\n\n        if (['examples', 'externals', 'metas', 'notes', 'tags'].includes(key)) {\n          for (const value of values) {\n            obj = obj[key.slice(0, -1)](value);\n          }\n\n          continue;\n        }\n\n        if (key === 'alterations') {\n          const alter = {};\n\n          for (const {\n            target,\n            adjuster\n          } of values) {\n            alter[target] = adjuster;\n          }\n\n          obj = obj.alter(alter);\n          continue;\n        }\n\n        if (key === 'whens') {\n          for (const value of values) {\n            const {\n              ref,\n              is,\n              not,\n              then,\n              otherwise,\n              concat\n            } = value;\n\n            if (concat) {\n              obj = obj.concat(concat);\n            } else if (ref) {\n              obj = obj.when(ref, {\n                is,\n                not,\n                then,\n                otherwise,\n                switch: value.switch,\n                break: value.break\n              });\n            } else {\n              obj = obj.when(is, {\n                then,\n                otherwise,\n                break: value.break\n              });\n            }\n          }\n\n          continue;\n        }\n\n        if (key === 'shared') {\n          for (const value of values) {\n            obj = obj.shared(value);\n          }\n        }\n      }\n\n      return obj;\n    }\n\n  },\n  messages: {\n    'any.custom': '{{#label}} failed custom validation because {{#error.message}}',\n    'any.default': '{{#label}} threw an error when running default method',\n    'any.failover': '{{#label}} threw an error when running failover method',\n    'any.invalid': '{{#label}} contains an invalid value',\n    'any.only': '{{#label}} must be {if(#valids.length == 1, \"\", \"one of \")}{{#valids}}',\n    'any.ref': '{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}',\n    'any.required': '{{#label}} is required',\n    'any.unknown': '{{#label}} is not allowed'\n  }\n});","map":{"version":3,"sources":["C:/scripting/jobs assignments/whist/backend/node_modules/joi/lib/types/any.js"],"names":["Assert","require","Base","Common","Messages","internals","module","exports","extend","type","flags","only","default","terms","alterations","init","examples","externals","metas","notes","shared","tags","whens","rules","custom","method","description","undefined","$_addRule","name","args","validate","value","helpers","err","error","multi","messages","prefs","schema","isSchema","_flags","id","obj","clone","$_terms","push","$_mutateRegister","warning","code","local","warn","modifiers","keep","rule","enabled","message","compile","manifest","build","desc","key","values","includes","slice","alter","target","adjuster","ref","is","not","then","otherwise","concat","when","switch","break"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Base = require('../base');\nconst Common = require('../common');\nconst Messages = require('../messages');\n\n\nconst internals = {};\n\n\nmodule.exports = Base.extend({\n\n    type: 'any',\n\n    flags: {\n\n        only: { default: false }\n    },\n\n    terms: {\n\n        alterations: { init: null },\n        examples: { init: null },\n        externals: { init: null },\n        metas: { init: [] },\n        notes: { init: [] },\n        shared: { init: null },\n        tags: { init: [] },\n        whens: { init: null }\n    },\n\n    rules: {\n\n        custom: {\n            method(method, description) {\n\n                Assert(typeof method === 'function', 'Method must be a function');\n                Assert(description === undefined || description && typeof description === 'string', 'Description must be a non-empty string');\n\n                return this.$_addRule({ name: 'custom', args: { method, description } });\n            },\n            validate(value, helpers, { method }) {\n\n                try {\n                    return method(value, helpers);\n                }\n                catch (err) {\n                    return helpers.error('any.custom', { error: err });\n                }\n            },\n            args: ['method', 'description'],\n            multi: true\n        },\n\n        messages: {\n            method(messages) {\n\n                return this.prefs({ messages });\n            }\n        },\n\n        shared: {\n            method(schema) {\n\n                Assert(Common.isSchema(schema) && schema._flags.id, 'Schema must be a schema with an id');\n\n                const obj = this.clone();\n                obj.$_terms.shared = obj.$_terms.shared || [];\n                obj.$_terms.shared.push(schema);\n                obj.$_mutateRegister(schema);\n                return obj;\n            }\n        },\n\n        warning: {\n            method(code, local) {\n\n                Assert(code && typeof code === 'string', 'Invalid warning code');\n\n                return this.$_addRule({ name: 'warning', args: { code, local }, warn: true });\n            },\n            validate(value, helpers, { code, local }) {\n\n                return helpers.error(code, local);\n            },\n            args: ['code', 'local'],\n            multi: true\n        }\n    },\n\n    modifiers: {\n\n        keep(rule, enabled = true) {\n\n            rule.keep = enabled;\n        },\n\n        message(rule, message) {\n\n            rule.message = Messages.compile(message);\n        },\n\n        warn(rule, enabled = true) {\n\n            rule.warn = enabled;\n        }\n    },\n\n    manifest: {\n\n        build(obj, desc) {\n\n            for (const key in desc) {\n                const values = desc[key];\n\n                if (['examples', 'externals', 'metas', 'notes', 'tags'].includes(key)) {\n                    for (const value of values) {\n                        obj = obj[key.slice(0, -1)](value);\n                    }\n\n                    continue;\n                }\n\n                if (key === 'alterations') {\n                    const alter = {};\n                    for (const { target, adjuster } of values) {\n                        alter[target] = adjuster;\n                    }\n\n                    obj = obj.alter(alter);\n                    continue;\n                }\n\n                if (key === 'whens') {\n                    for (const value of values) {\n                        const { ref, is, not, then, otherwise, concat } = value;\n                        if (concat) {\n                            obj = obj.concat(concat);\n                        }\n                        else if (ref) {\n                            obj = obj.when(ref, { is, not, then, otherwise, switch: value.switch, break: value.break });\n                        }\n                        else {\n                            obj = obj.when(is, { then, otherwise, break: value.break });\n                        }\n                    }\n\n                    continue;\n                }\n\n                if (key === 'shared') {\n                    for (const value of values) {\n                        obj = obj.shared(value);\n                    }\n                }\n            }\n\n            return obj;\n        }\n    },\n\n    messages: {\n        'any.custom': '{{#label}} failed custom validation because {{#error.message}}',\n        'any.default': '{{#label}} threw an error when running default method',\n        'any.failover': '{{#label}} threw an error when running failover method',\n        'any.invalid': '{{#label}} contains an invalid value',\n        'any.only': '{{#label}} must be {if(#valids.length == 1, \"\", \"one of \")}{{#valids}}',\n        'any.ref': '{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}',\n        'any.required': '{{#label}} is required',\n        'any.unknown': '{{#label}} is not allowed'\n    }\n});\n"]},"metadata":{},"sourceType":"script"}