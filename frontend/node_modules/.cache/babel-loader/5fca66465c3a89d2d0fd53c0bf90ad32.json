{"ast":null,"code":"'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Any = require('./any');\n\nconst Common = require('../common');\n\nconst Values = require('../values');\n\nconst internals = {};\n\ninternals.isBool = function (value) {\n  return typeof value === 'boolean';\n};\n\nmodule.exports = Any.extend({\n  type: 'boolean',\n  flags: {\n    sensitive: {\n      default: false\n    }\n  },\n  terms: {\n    falsy: {\n      init: null,\n      manifest: 'values'\n    },\n    truthy: {\n      init: null,\n      manifest: 'values'\n    }\n  },\n\n  coerce(value, {\n    schema\n  }) {\n    if (typeof value === 'boolean') {\n      return;\n    }\n\n    if (typeof value === 'string') {\n      const normalized = schema._flags.sensitive ? value : value.toLowerCase();\n      value = normalized === 'true' ? true : normalized === 'false' ? false : value;\n    }\n\n    if (typeof value !== 'boolean') {\n      value = schema.$_terms.truthy && schema.$_terms.truthy.has(value, null, null, !schema._flags.sensitive) || (schema.$_terms.falsy && schema.$_terms.falsy.has(value, null, null, !schema._flags.sensitive) ? false : value);\n    }\n\n    return {\n      value\n    };\n  },\n\n  validate(value, {\n    error\n  }) {\n    if (typeof value !== 'boolean') {\n      return {\n        value,\n        errors: error('boolean.base')\n      };\n    }\n  },\n\n  rules: {\n    truthy: {\n      method(...values) {\n        Common.verifyFlat(values, 'truthy');\n        const obj = this.clone();\n        obj.$_terms.truthy = obj.$_terms.truthy || new Values();\n\n        for (let i = 0; i < values.length; ++i) {\n          const value = values[i];\n          Assert(value !== undefined, 'Cannot call truthy with undefined');\n          obj.$_terms.truthy.add(value);\n        }\n\n        return obj;\n      }\n\n    },\n    falsy: {\n      method(...values) {\n        Common.verifyFlat(values, 'falsy');\n        const obj = this.clone();\n        obj.$_terms.falsy = obj.$_terms.falsy || new Values();\n\n        for (let i = 0; i < values.length; ++i) {\n          const value = values[i];\n          Assert(value !== undefined, 'Cannot call falsy with undefined');\n          obj.$_terms.falsy.add(value);\n        }\n\n        return obj;\n      }\n\n    },\n    sensitive: {\n      method(enabled = true) {\n        return this.$_setFlag('sensitive', enabled);\n      }\n\n    }\n  },\n  cast: {\n    number: {\n      from: internals.isBool,\n\n      to(value, helpers) {\n        return value ? 1 : 0;\n      }\n\n    },\n    string: {\n      from: internals.isBool,\n\n      to(value, helpers) {\n        return value ? 'true' : 'false';\n      }\n\n    }\n  },\n  manifest: {\n    build(obj, desc) {\n      if (desc.truthy) {\n        obj = obj.truthy(...desc.truthy);\n      }\n\n      if (desc.falsy) {\n        obj = obj.falsy(...desc.falsy);\n      }\n\n      return obj;\n    }\n\n  },\n  messages: {\n    'boolean.base': '{{#label}} must be a boolean'\n  }\n});","map":{"version":3,"sources":["C:/scripting/jobs assignments/whist/backend/node_modules/joi/lib/types/boolean.js"],"names":["Assert","require","Any","Common","Values","internals","isBool","value","module","exports","extend","type","flags","sensitive","default","terms","falsy","init","manifest","truthy","coerce","schema","normalized","_flags","toLowerCase","$_terms","has","validate","error","errors","rules","method","values","verifyFlat","obj","clone","i","length","undefined","add","enabled","$_setFlag","cast","number","from","to","helpers","string","build","desc","messages"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Any = require('./any');\nconst Common = require('../common');\nconst Values = require('../values');\n\n\nconst internals = {};\n\n\ninternals.isBool = function (value) {\n\n    return typeof value === 'boolean';\n};\n\n\nmodule.exports = Any.extend({\n\n    type: 'boolean',\n\n    flags: {\n\n        sensitive: { default: false }\n    },\n\n    terms: {\n\n        falsy: {\n            init: null,\n            manifest: 'values'\n        },\n\n        truthy: {\n            init: null,\n            manifest: 'values'\n        }\n    },\n\n    coerce(value, { schema }) {\n\n        if (typeof value === 'boolean') {\n            return;\n        }\n\n        if (typeof value === 'string') {\n            const normalized = schema._flags.sensitive ? value : value.toLowerCase();\n            value = normalized === 'true' ? true : (normalized === 'false' ? false : value);\n        }\n\n        if (typeof value !== 'boolean') {\n            value = schema.$_terms.truthy && schema.$_terms.truthy.has(value, null, null, !schema._flags.sensitive) ||\n                (schema.$_terms.falsy && schema.$_terms.falsy.has(value, null, null, !schema._flags.sensitive) ? false : value);\n        }\n\n        return { value };\n    },\n\n    validate(value, { error }) {\n\n        if (typeof value !== 'boolean') {\n            return { value, errors: error('boolean.base') };\n        }\n    },\n\n    rules: {\n        truthy: {\n            method(...values) {\n\n                Common.verifyFlat(values, 'truthy');\n\n                const obj = this.clone();\n                obj.$_terms.truthy = obj.$_terms.truthy || new Values();\n\n                for (let i = 0; i < values.length; ++i) {\n                    const value = values[i];\n\n                    Assert(value !== undefined, 'Cannot call truthy with undefined');\n                    obj.$_terms.truthy.add(value);\n                }\n\n                return obj;\n            }\n        },\n\n        falsy: {\n            method(...values) {\n\n                Common.verifyFlat(values, 'falsy');\n\n                const obj = this.clone();\n                obj.$_terms.falsy = obj.$_terms.falsy || new Values();\n\n                for (let i = 0; i < values.length; ++i) {\n                    const value = values[i];\n\n                    Assert(value !== undefined, 'Cannot call falsy with undefined');\n                    obj.$_terms.falsy.add(value);\n                }\n\n                return obj;\n            }\n        },\n\n        sensitive: {\n            method(enabled = true) {\n\n                return this.$_setFlag('sensitive', enabled);\n            }\n        }\n    },\n\n    cast: {\n        number: {\n            from: internals.isBool,\n            to(value, helpers) {\n\n                return value ? 1 : 0;\n            }\n        },\n        string: {\n            from: internals.isBool,\n            to(value, helpers) {\n\n                return value ? 'true' : 'false';\n            }\n        }\n    },\n\n    manifest: {\n\n        build(obj, desc) {\n\n            if (desc.truthy) {\n                obj = obj.truthy(...desc.truthy);\n            }\n\n            if (desc.falsy) {\n                obj = obj.falsy(...desc.falsy);\n            }\n\n            return obj;\n        }\n    },\n\n    messages: {\n        'boolean.base': '{{#label}} must be a boolean'\n    }\n});\n"]},"metadata":{},"sourceType":"script"}